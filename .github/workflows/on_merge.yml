on:
  pull_request:
    types:
      - closed
    branches:
      - 'main'

env:
  TF_CLOUD_ORGANIZATION: "nathanjnorris-org"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "servarr"
  CONFIG_DIRECTORY: "./"
    
jobs:
  terraform_apply:
    if: github.event.pull_request.merged == true
    name: Terraform apply
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.2.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create apply run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.2.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Apply run
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.2.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
  
  ssh_command:
    if: github.event.pull_request.merged == true
    name: Run SSH command
    needs: terraform_apply
    runs-on: ubuntu-latest
    steps:
    - name: Connect and run command on remote server
      uses: nathanjnorris/cloudflared-ssh-action@latest
      with:
        host: ${{ vars.SSH_HOST }}
        username: ${{ vars.SSH_USERNAME }}
        private_key_filename: ${{ vars.SSH_PRIVATE_KEY_FILENAME }}
        private_key_value: ${{ secrets.SSH_PRIVATE_KEY_VALUE }}
        port: ${{ vars.SSH_PORT }}
        service_token_id: ${{ vars.SERVICE_TOKEN_ID }}
        service_token_secret: ${{ secrets.SERVICE_TOKEN_SECRET }}
        commands: cd servarr; git reset --hard HEAD; git pull; echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash setup.sh; echo "TUNNEL_TOKEN=${{ secrets.SERVARR_TUNNEL_TOKEN }}" > .env; echo "${{ secrets.MULLVAD_PRIVATE_KEY }}" > mullvad_private_key.txt; docker compose up --build -d