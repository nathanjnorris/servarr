on:
  pull_request:
    types:
      - closed
    branches:
      - 'main'

env:
  TF_CLOUD_ORGANIZATION: "nathanjnorris-org"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "servarr"
  CONFIG_DIRECTORY: "./"
    
jobs:
  terraform_apply:
    if: github.event.pull_request.merged == true
    name: Terraform apply
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.2.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create apply run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.2.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Apply run
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.2.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
  
  # ssh_command:
  #   if: github.event.pull_request.merged == true
  #   name: Run SSH command
  #   needs: terraform_apply
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   steps:
  #   - name: Connect and run command on remote server
  #     uses: nathanjnorris/cloudflared-ssh-action@latest
  #     with:
  #       host: ${{ vars.SSH_HOST }}
  #       username: ${{ vars.SSH_USERNAME }}
  #       private_key_filename: ${{ vars.SSH_PRIVATE_KEY_FILENAME }}
  #       private_key_value: ${{ secrets.SSH_PRIVATE_KEY_VALUE }}
  #       port: ${{ vars.SSH_PORT }}
  #       service_token_id: ${{ vars.SERVICE_TOKEN_ID }}
  #       service_token_secret: ${{ secrets.SERVICE_TOKEN_SECRET }}
  #       commands: cd servarr; git reset --hard HEAD; git pull; echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash setup.sh; echo "TUNNEL_TOKEN=${{ secrets.SERVARR_TUNNEL_TOKEN }}" > .env; echo "GLUETUN_PRIVATE_KEY=${{ secrets.GLUETUN_PRIVATE_KEY }}" >> .env; echo "GLUETUN_PRESHARED_KEY=${{ secrets.GLUETUN_PRESHARED_KEY }}" >> .env; echo "KOPIA_PASSWORD=${{ secrets.KOPIA_PASSWORD }}" >> .env; docker compose pull; docker compose up --build --remove-orphans -d; docker system prune -f
  
  tailscale-ssh:
    if: github.event.pull_request.merged == true
    needs: terraform_apply
    runs-on: ubuntu-latest
    name: SSH and run commands
    env:
      MACHINE: servarr
      SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY_VALUE }}
      USER: ${{ vars.SSH_USERNAME }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Tailscale
      uses: tailscale/github-action@v3
      with:
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        tags: tag:gha

    - name: Add SSH key
      run: |
        mkdir -p ~/.ssh
        MACHINE_IP="$(tailscale ip -6 $MACHINE)"
        echo "MACHINE_IP=$MACHINE_IP" >> $GITHUB_ENV
        ssh-keyscan $MACHINE_IP >> ~/.ssh/known_hosts
        printf "%s" "$SSH_KEY" > ~/.ssh/key
        chmod 600 ~/.ssh/key                              

    - name: Pull latest changes from default branch
      run: |
        ssh -i ~/.ssh/key "$USER@$MACHINE_IP" "cd servarr && git reset --hard HEAD && git pull"

    - name: Setup users, folders, and permissions
      run: |
        ssh -i ~/.ssh/key "$USER@$MACHINE_IP" "echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash setup.sh"

    - name: Add secrets to .env file
      run: |
        ssh -i ~/.ssh/key "$USER@$MACHINE_IP" "echo "TUNNEL_TOKEN=${{ secrets.SERVARR_TUNNEL_TOKEN }}" > .env && echo "GLUETUN_PRIVATE_KEY=${{ secrets.GLUETUN_PRIVATE_KEY }}" >> .env && echo "GLUETUN_PRESHARED_KEY=${{ secrets.GLUETUN_PRESHARED_KEY }}" >> .env && echo "TS_CLIENT_SECRET_GLUETUN=${{ secrets.TS_CLIENT_SECRET_GLUETUN }}" >> .env && echo "KOPIA_PASSWORD=${{ secrets.KOPIA_PASSWORD }}" >> .env"
    
    - name: Deploy with Docker Compose
      run: |
        ssh -i ~/.ssh/key "$USER@$MACHINE_IP" "bash deploy.sh"
